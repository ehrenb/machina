version: '3'
services:
  rabbitmq:
    image: rabbitmq:3.9-management
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
#      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit heartbeat 0 log_levels [{connection,debug}]"
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - machinanet

  neo4j:
    image: neo4j:4.1-community #neo4j:5.3.0-community
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      - neo4j-data:/data
    environment: 
      - NEO4J_AUTH=neo4j/tXOCq81bn7QfGTMJMrkQqP4J1
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_default__database=machina
      # Raise memory limits
      - NEO4J_dbms_memory_pagecache_size=4G
      - NEO4J_dbms_memory_heap_initial__size=4G
      - NEO4J_dbms_memory_heap_max__size=4G
    networks:
      - machinanet

  base-alpine:
    build: 
      context: ./images/machina-base
      dockerfile: Dockerfile.alpine
    image: behren/machina-base-alpine:latest
    command: echo 'scaled'

  base-ubuntu:
    build:
      context: ./images/machina-base
      dockerfile: Dockerfile.ubuntu
    image: behren/machina-base-ubuntu:latest
    command: echo 'scaled'

  base-ghidra:
    build:
      context: ./images/machina-base-ghidra
      dockerfile: Dockerfile
    depends_on:
      - base-ubuntu
    image: behren/machina-base-ghidra:latest
    command: echo 'scaled'

  docs-web:
    depends_on:
      - base-alpine
    ports: 
      - 80:80
      - 2019:2019
    build:
      context: ./images/machina-docs
      dockerfile: Dockerfile
    image: behren/machina-docs:latest
    command: bash -c "caddy run --config /machina/Caddyfile.dev"

  identifier:
    depends_on:
      - base-alpine
      - initializer
    build:
      context: ./images/machina-identifier
    image: behren/machina-identifier:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  initializer:
    depends_on:
      - base-alpine
    build:
      context: ./images/machina-initializer
    image: behren/machina-initializer:latest
    volumes:
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 neo4j:7687 && python3 src/run.py && tail -f /dev/null"
    networks:
      - machinanet

  zipanalyzer:
    depends_on:
      - base-alpine
      - initializer
    build: 
      context: ./images/machina-zip
    image: behren/machina-zip:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  jaranalyzer:
    depends_on:
      - base-alpine
      - initializer
    build: 
      context: ./images/machina-jar
    image: behren/machina-jar:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  androguardanalysis:
    depends_on:
      - base-alpine
      - initializer
    build: 
      context: ./images/machina-androguard
    image: behren/machina-androguard:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  findurls:
    depends_on:
      - base-alpine
      - initializer
    build: 
      context: ./images/machina-findurls
    image: behren/machina-findurls:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  exif:
    depends_on:
      - base-alpine
      - initializer
    build:
      context: ./images/machina-exif
    image: behren/machina-exif:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  gzip:
    depends_on:
      - base-alpine
      - initializer
    build:
      context: ./images/machina-gzip
    image: behren/machina-gzip:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  bzip2:
    depends_on:
      - base-alpine
      - initializer
    build:
      context: ./images/machina-bz2
    image: behren/machina-bz2:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  tar:
    depends_on:
      - base-alpine
      - initializer
    build:
      context: ./images/machina-tar
    image: behren/machina-tar:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  ssdeepanalysis:
    depends_on:
      - base-ubuntu
      - initializer
    build:
      context: ./images/machina-ssdeep
    image: behren/machina-ssdeep:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  similarityanalysis:
    depends_on:
      - base-ubuntu
      - initializer
    build:
      context: ./images/machina-similarity
    image: behren/machina-similarity:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  binwalk:
    depends_on:
      - base-ubuntu
      - initializer
    build:
      context: ./images/machina-binwalk
    image: behren/machina-binwalk:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

  ghidra-project-creator:
    depends_on:
      - base-ghidra
      - initializer
    build:
      context: ./images/machina-ghidra-project-creator
    image: behren/machina-ghidra-project-creator:latest
    volumes:
      - ./data:/data
      - ./configs:/configs
    command:
      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
        && python3 src/run.py"
    networks:
      - machinanet

#  contenturianalysis:
#    depends_on:
#      - base-alpine
#      - initializer
#    build:
#      context: ./images/machina-content-uri-analysis
#    image: behren/machina-contenturianalysis:latest
#    volumes:
#      - ./data:/data
#      - ./configs:/configs
#      - /var/run/docker.sock:/var/run/docker.sock # This worker requires the ability to reach the host docker daemon. Maybe in the future, this could be removed by having a pool of standby emulators in containers
#    command:
#      bash -c "./wait-for-it.sh -t 60 rabbitmq:5672 -- ./wait-for-it.sh -t 60 neo4j:7687
#        && python3 images/machina-tar/src/run.py"
#    networks:
#      - machinanet


volumes:
  neo4j-data:

networks:
    machinanet:
      driver: bridge
